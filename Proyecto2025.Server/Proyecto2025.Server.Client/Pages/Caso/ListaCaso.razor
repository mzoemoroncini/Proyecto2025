@page "/casos"
@inject IHttpServicio http
@inject NavigationManager navHttp

<h3>Lista de Casos</h3>

<table>
    <tr>
        <th>Casos</th>
    </tr>

    @if (casos == null)
    {
        <p>Buscando...</p>
    }
    else if (casos.Count == 0)
    {
                <p>No hay casos disponibles.</p>
    }
    else
    {
        @foreach (var caso in casos)
        {
            <tr>
                <td>@caso.DatosCaso</td>
                <td>
                    <a class="btn btn-primary"
                       href="/casos/editar/{caso.Id}">
                        Editar
                    </a>
                </td>
                <td>
                    <button class="btn btn-danger"
                            @onclick="() => Eliminar(caso)">
                        Eliminar
                    </button>
                </td>
            </tr>
        }
    }
    <br />

   
</table>

 <p>@Mensaje</p>
<br />
<Confirmacion @ref="confirmacion" 
              Titulo="Cuidado"
              textOk="Aceptar"
              textCancelar="No borrar"
              onConfirm = "Borrar"
              onCancel="Cancelar">
    <p>Está por Borrar un caso.</p>
    <br />
    <p>¿Está seguro?</p>
</Confirmacion> 

@code {
    List<CasoListadoDTO> casos;
    string Mensaje = "";
    Confirmacion confirmacion;
    CasoListadoDTO casoSeleccionado = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LeerCasos();

    }

    private async Task LeerCasos()
    {

        // casos = await Http.GetFromJsonAsync<List<CasoListadoDTO>>("api/Caso/listacaso");
        string Mensaje = "";
        var resp = await http.Get<List<CasoListadoDTO>>("api/caso/listacaso");
        if (!resp.Error)
        {
            casos = resp.Respuesta;
        }
        else
        {
            Mensaje = resp.ObtenerError();
        }
    }
    private async Task Borrar()
    {
        var resp = await http.Delete($"api/caso/{casoSeleccionado.Id}");
        if (resp.Error)
        {
            Mensaje = resp.ObtenerError();
        }
        casoSeleccionado = null;
        confirmacion.Ocultar();
        await LeerCasos();
    }

    private async Task Eliminar(CasoListadoDTO caso)
    {
        casoSeleccionado = caso;
        confirmacion.Ver();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        casoSeleccionado = null;
    }
}


